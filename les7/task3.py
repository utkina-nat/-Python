'''Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).Данные методы должны применяться только к клеткам
и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно.
В методе деления должно осуществляться округление значения до целого числа.
Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше
нуля, иначе выводить соответствующее сообщение.
Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих
двух клеток.
Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
ячеек этих двух клеток.
В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
*****\n*****\n**.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
*****\n*****\n*****.
Подсказка: подробный список операторов для перегрузки доступен по ссылке.'''

class Cell:
    def __init__(self, count):
        if count > 0:
            self._count = count
        else:
            raise ValueError('Количество ячеек клетки должно быть положительно.')

    def __add__(self, other):
        #Сложение
        if self._check_class(other):
            return Cell(self._count + other._count)

    def __sub__(self, other):
        #Вычитание
        if self._check_class(other):
            result_cell = self._count - other._count
            if result_cell > 0:
                return Cell(result_cell)
            else:
                raise ValueError('Результат вычитания клеток должен быть больше нуля.')

    def __mul__(self, other):
        #Умножение
        if self._check_class(other):
            return Cell(self._count * other._count)

    def __truediv__(self, other):
        #Обычное деление
        if self._check_class(other):
            return Cell(self._count // other._count)

    def _check_class(self, other_el):
        #Проверяет является данный класс классом клетки
        if isinstance(other_el, Cell):
            return True
        else:
            raise TypeError(f'{type(other_el)} не является классом клетки.')

    def __str__(self):
        #выводим клетки на эран
        #определяем оптимальное количество столбцов, что фигура -> к квадрату
        float_columns = self._count ** 0.5
        columns = int(float_columns) + 1 if float_columns % 1 else int(float_columns)
        return self._make_order(columns)

    def _make_order(self, columns):
        #организуем структуру клетки
        return_list = []
        for numb in range(self._count):
            return_list.append('*')
            if not (numb + 1) % columns:
                return_list.append('\n')
        return ''.join(return_list)


cell_1 = Cell(5)
cell_2 = Cell(2)
cell_3 = Cell(1)
print(f'{cell_1} уменьшаемого значения')
print(f'{cell_1} вычитаемого значения')
print(f'{cell_1 + cell_2 + cell_3} результат сложения')
print(f'{cell_1 -cell_3} результат вычитания')
print(cell_2 - cell_3)
print(cell_2._make_order(5))
print(cell_3._make_order(10))

